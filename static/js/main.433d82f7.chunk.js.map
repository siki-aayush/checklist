{"version":3,"sources":["components/BottomStatus.tsx","components/CreateTodo.tsx","components/ListTodo.tsx","App.tsx","index.tsx"],"names":["BottomStatus","props","className","onClick","statusHandler","statusOpt","all","active","completed","CreateTodo","useState","newNote","setNewNote","xmlns","width","height","viewBox","themeChangeHandler","theme","themes","light","fill","fillRule","d","onSubmit","evnt","preventDefault","createHandler","id","value","onChange","target","form","onKeyDown","e","keyCode","shiftKey","document","querySelector","click","style","resize","type","htmlFor","display","ListTodo","onDragEnd","result","source","destination","console","log","droppableId","index","swapEl","provided","snapshot","ref","innerRef","droppableProps","todos","map","todo","idx","draggableId","providedDraggable","snapshotDraggable","draggableProps","key","dragHandleProps","checked","completeHandler","note","deleteHandler","placeholder","pendings","clearHandler","App","setTodos","status","setStatus","setTheme","useEffect","stat","querySelectorAll","forEach","node","classList","remove","add","visibleTodos","filter","newTodo","Date","now","toString","prevTodos","getElementsByTagName","toggle","dark","findIndex","prevTodo","splice","dest","sourceId","destId","undefined","temp","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.433d82f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { statusOpt } from \"../App\";\r\ninterface bottomStatusProps {\r\n\tstatusHandler: (stat: statusOpt) => void;\r\n}\r\nexport default function BottomStatus(props: bottomStatusProps) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p\r\n\t\t\t\tclassName=\"lowest__all\"\r\n\t\t\t\tonClick={() => props.statusHandler(statusOpt.all)}\r\n\t\t\t>\r\n\t\t\t\tAll\r\n\t\t\t</p>\r\n\t\t\t<p\r\n\t\t\t\tclassName=\"lowest__active\"\r\n\t\t\t\tonClick={() => props.statusHandler(statusOpt.active)}\r\n\t\t\t>\r\n\t\t\t\tActive\r\n\t\t\t</p>\r\n\t\t\t<p\r\n\t\t\t\tclassName=\"lowest__completed\"\r\n\t\t\t\tonClick={() => props.statusHandler(statusOpt.completed)}\r\n\t\t\t>\r\n\t\t\t\tCompleted\r\n\t\t\t</p>\r\n\t\t</>\r\n\t);\r\n}\r\n","import { themes } from \"../App\";\r\nimport React, { useState } from \"react\";\r\n\r\ninterface createProps {\r\n    createHandler: (note: string) => void;\r\n    themeChangeHandler: () => void;\r\n    theme: themes;\r\n}\r\n\r\nexport default function CreateTodo(props: createProps) {\r\n    let [newNote, setNewNote] = useState<string>(\"\");\r\n\r\n    const onEnterPress = (e: any) => {\r\n        if (e.keyCode === 13 && e.shiftKey === false) {\r\n            e.preventDefault();\r\n            let temp: HTMLInputElement = document.querySelector(\"#helloworld\")!;\r\n            temp.click();\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"upper\">\r\n            <div className=\"container\">\r\n                <div className=\"upper__title flex flex-sb\">\r\n                    <h1 className=\"upper__text\">TODO</h1>\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"26\"\r\n                        height=\"26\"\r\n                        viewBox=\"0 0 30 30\"\r\n                        className=\"upper__icon\"\r\n                        onClick={props.themeChangeHandler}\r\n                    >\r\n                        {props.theme === themes.light ? (\r\n                            <path\r\n                                fill=\"#FFF\"\r\n                                fillRule=\"evenodd\"\r\n                                d=\"M13 0c.81 0 1.603.074 2.373.216C10.593 1.199 7 5.43 7 10.5 7 16.299 11.701 21 17.5 21c2.996 0 5.7-1.255 7.613-3.268C23.22 22.572 18.51 26 13 26 5.82 26 0 20.18 0 13S5.82 0 13 0z\"\r\n                            />\r\n                        ) : (\r\n                            <path\r\n                                fill=\"#FFF\"\r\n                                fillRule=\"evenodd\"\r\n                                d=\"M13 21a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1zm-5.657-2.343a1 1 0 010 1.414l-2.121 2.121a1 1 0 01-1.414-1.414l2.12-2.121a1 1 0 011.415 0zm12.728 0l2.121 2.121a1 1 0 01-1.414 1.414l-2.121-2.12a1 1 0 011.414-1.415zM13 8a5 5 0 110 10 5 5 0 010-10zm12 4a1 1 0 110 2h-3a1 1 0 110-2h3zM4 12a1 1 0 110 2H1a1 1 0 110-2h3zm18.192-8.192a1 1 0 010 1.414l-2.12 2.121a1 1 0 01-1.415-1.414l2.121-2.121a1 1 0 011.414 0zm-16.97 0l2.121 2.12A1 1 0 015.93 7.344L3.808 5.222a1 1 0 011.414-1.414zM13 0a1 1 0 011 1v3a1 1 0 11-2 0V1a1 1 0 011-1z\"\r\n                            />\r\n                        )}\r\n                    </svg>\r\n                </div>\r\n                <div className=\"todo\">\r\n                    <form\r\n                        onSubmit={(evnt) => {\r\n                            evnt.preventDefault();\r\n                            props.createHandler(newNote);\r\n                            setNewNote(\"\");\r\n                        }}\r\n                        id=\"upperform\"\r\n                    >\r\n                        {/* <input\r\n\t\t\t\t\t\t\tclassName=\"todo__content upper__input\"\r\n\t\t\t\t\t\t\ttype=\"textarea\"\r\n\t\t\t\t\t\t\tvalue={newNote}\r\n\t\t\t\t\t\t\tonChange={(evnt) => {\r\n\t\t\t\t\t\t\t\tsetNewNote(evnt.target.value);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n                        <textarea\r\n                            id=\"testing\"\r\n                            className=\"todo__content upper__input\"\r\n                            value={newNote}\r\n                            onChange={(evnt) => {\r\n                                setNewNote(evnt.target.value);\r\n                            }}\r\n                            form=\"upperform\"\r\n                            onKeyDown={onEnterPress}\r\n                            style={{ resize: \"none\" }}\r\n                        />\r\n                        <div className=\"todo__cb-container\">\r\n                            <div className=\"todo__round\">\r\n                                <input\r\n                                    id=\"upper_checkbox\"\r\n                                    type=\"checkbox\"\r\n                                    className=\"todo__checkbox\"\r\n                                />\r\n                                <label htmlFor=\"upper_checkbox\"></label>\r\n                            </div>\r\n                        </div>\r\n                        <input\r\n                            type=\"submit\"\r\n                            id=\"helloworld\"\r\n                            style={{ display: \"none\" }}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { todoState, statusOpt } from \"../App\";\r\nimport BottomStatus from \"./BottomStatus\";\r\nimport {\r\n    DragDropContext,\r\n    Droppable,\r\n    Draggable,\r\n    DroppableProvided,\r\n    DroppableStateSnapshot,\r\n    DraggableProvided,\r\n    DraggableStateSnapshot,\r\n    DropResult,\r\n} from \"react-beautiful-dnd\";\r\ntype completeHandler = (id: string) => void;\r\n\r\ninterface listProps {\r\n    todos: todoState;\r\n    completeHandler: completeHandler;\r\n    statusHandler: (stat: statusOpt) => void;\r\n    deleteHandler: (id: string) => void;\r\n    clearHandler: () => void;\r\n    pendings: number;\r\n    swapEl: (source: number, dest: number | undefined) => void;\r\n}\r\n\r\nexport default function ListTodo(props: listProps) {\r\n    return (\r\n        <div className=\"lower container\">\r\n            <DragDropContext\r\n                onDragEnd={(result: DropResult) => {\r\n                    const { source, destination } = result;\r\n                    console.log(\r\n                        `drop result = ${source.droppableId} ${source.index} ${destination?.droppableId} ${destination?.index}`\r\n                    );\r\n                    props.swapEl(source.index, destination?.index);\r\n                }}\r\n            >\r\n                <Droppable droppableId=\"drop\">\r\n                    {(\r\n                        provided: DroppableProvided,\r\n                        snapshot: DroppableStateSnapshot\r\n                    ) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {props.todos.map((todo, idx) => {\r\n                                return (\r\n                                    <Draggable\r\n                                        draggableId={todo.id}\r\n                                        index={idx}\r\n                                        key={todo.id}\r\n                                    >\r\n                                        {(\r\n                                            providedDraggable: DraggableProvided,\r\n                                            snapshotDraggable: DraggableStateSnapshot\r\n                                        ) => (\r\n                                            <div\r\n                                                ref={providedDraggable.innerRef}\r\n                                                {...providedDraggable.draggableProps}\r\n                                                className=\"todo\"\r\n                                                key={idx}\r\n                                                {...providedDraggable.dragHandleProps}\r\n                                            >\r\n                                                <div className=\"todo__cb-container\">\r\n                                                    <div className=\"todo__bg-grad\">\r\n                                                        <div className=\"todo__round\">\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                id=\"checkbox\"\r\n                                                                className=\"todo__checkbox\"\r\n                                                                checked={\r\n                                                                    todo.completed\r\n                                                                }\r\n                                                                onChange={(e) =>\r\n                                                                    e.preventDefault()\r\n                                                                }\r\n                                                            />\r\n                                                            <label\r\n                                                                htmlFor=\"checkbox\"\r\n                                                                onClick={(e) =>\r\n                                                                    props.completeHandler(\r\n                                                                        todo.id\r\n                                                                    )\r\n                                                                }\r\n                                                            ></label>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <p\r\n                                                    className={`todo__content + ${\r\n                                                        todo.completed\r\n                                                            ? \"checked\"\r\n                                                            : \"\"\r\n                                                    }`}\r\n                                                >\r\n                                                    {todo.note}\r\n                                                </p>\r\n                                                <svg\r\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                    width=\"18\"\r\n                                                    height=\"18\"\r\n                                                    className=\"todo__cross\"\r\n                                                    onClick={() =>\r\n                                                        props.deleteHandler(\r\n                                                            todo.id\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    <path\r\n                                                        fill=\"#494C6B\"\r\n                                                        fillRule=\"evenodd\"\r\n                                                        d=\"M16.97 0l.708.707L9.546 8.84l8.132 8.132-.707.707-8.132-8.132-8.132 8.132L0 16.97l8.132-8.132L0 .707.707 0 8.84 8.132 16.971 0z\"\r\n                                                    />\r\n                                                </svg>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            <div className=\"todo todo-container flex flex-sb\">\r\n                                <p className=\"todo__time\">{`${props.pendings} taks left`}</p>\r\n                                <div className=\"todo__extra flex flex-c\">\r\n                                    <BottomStatus\r\n                                        statusHandler={props.statusHandler}\r\n                                    />\r\n                                </div>\r\n                                <p\r\n                                    className=\"todod__clear\"\r\n                                    onClick={props.clearHandler}\r\n                                >\r\n                                    Clear completed\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport BottomStatus from \"./components/BottomStatus\";\nimport CreateTodo from \"./components/CreateTodo\";\nimport ListTodo from \"./components/ListTodo\";\nimport \"./scss/style.scss\";\n\nexport type todo = {\n    id: string;\n    note: string;\n    completed: boolean;\n};\n// export type todoState = { [key: string]: todo };\nexport type todoState = Array<todo>;\nexport enum statusOpt {\n    all = \"all\",\n    active = \"active\",\n    completed = \"completed\",\n}\nexport enum themes {\n    light = \"light\",\n    dark = \"dark\",\n}\n\nfunction App() {\n    const [todos, setTodos] = useState<todoState>([]);\n    const [status, setStatus] = useState<statusOpt>(statusOpt.all);\n    const [theme, setTheme] = useState<themes>(themes.light);\n\n    useEffect(() => {\n        statusHandler(statusOpt.all);\n    }, []);\n\n    const createTodoHandler = (note: string) => {\n        const newTodo: todo = {\n            id: Date.now().toString(),\n            note: note,\n            completed: false,\n        };\n\n        setTodos((prevTodos: Array<todo>) => {\n            return [...prevTodos, newTodo];\n        });\n    };\n\n    const completeHandler = (id: string) => {\n        const idx = todos.findIndex((todo: todo) => {\n            return todo.id === id;\n        });\n\n        setTodos((prevTodo: Array<todo>) => {\n            const newTodo = [...prevTodo];\n            newTodo[idx] = {\n                ...newTodo[idx],\n                completed: !newTodo[idx].completed,\n            };\n            return newTodo;\n        });\n    };\n\n    const statusHandler = (stat: statusOpt) => {\n        document\n            .querySelectorAll(`.lowest__${status}`)\n            .forEach((node) => node?.classList.remove(\"status_active\"));\n        setStatus(stat);\n        document\n            .querySelectorAll(`.lowest__${stat}`)\n            .forEach((node) => node?.classList.add(\"status_active\"));\n    };\n\n    const deleteHandler = (id: string) => {\n        setTodos((prevTodo: Array<todo>) => {\n            const newTodo = [...prevTodo];\n            newTodo.splice(\n                newTodo.findIndex((todo) => todo.id === id),\n                1\n            );\n            return newTodo;\n        });\n    };\n\n    const clearHandler = () => {\n        setTodos((prevTodo: Array<todo>) => {\n            const newTodo = [...prevTodo];\n            return newTodo.filter((todo) => todo.completed === false);\n        });\n    };\n\n    const themeChangeHandler = () => {\n        document\n            .getElementsByTagName(\"body\")[0]\n            ?.classList.toggle(\"light-mode\");\n        theme === themes.light ? setTheme(themes.dark) : setTheme(themes.light);\n    };\n\n    let visibleTodos: todoState = todos;\n\n    if (status === statusOpt.active) {\n        visibleTodos = todos.filter((todo: todo) => todo.completed === false);\n    } else if (status === statusOpt.completed) {\n        visibleTodos = todos.filter((todo: todo) => todo.completed === true);\n    }\n\n    const swapEl = (source: number, dest: number | undefined) => {\n        let sourceId: string, destId: string;\n        if (dest !== undefined) {\n            sourceId = visibleTodos[source].id;\n            destId = visibleTodos[dest].id;\n            setTodos((prevTodo: Array<todo>) => {\n                const newTodo: Array<todo> = [...prevTodo];\n                source = newTodo.findIndex((todo) => todo.id === sourceId);\n                dest = newTodo.findIndex((todo) => todo.id === destId);\n                const temp = newTodo[source];\n                newTodo[source] = newTodo[dest];\n                newTodo[dest] = temp;\n                return newTodo;\n            });\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <CreateTodo\n                createHandler={createTodoHandler}\n                themeChangeHandler={themeChangeHandler}\n                theme={theme}\n            />\n            <ListTodo\n                todos={visibleTodos}\n                completeHandler={completeHandler}\n                statusHandler={statusHandler}\n                deleteHandler={deleteHandler}\n                clearHandler={clearHandler}\n                swapEl={swapEl}\n                pendings={\n                    todos.filter((todo) => todo.completed === false).length\n                }\n            />\n            <div className=\"lowest container\">\n                <div className=\"todo container flex flex-c\">\n                    <BottomStatus statusHandler={statusHandler} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}